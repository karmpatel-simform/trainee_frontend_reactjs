name: CI - Build Application
 
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
 
env:
  NODE_VERSION: '20'
  TERRAFORM_VERSION: '1.6.0'
  WORKING_DIRECTORY: './terraform'
  BUILD_ARTIFACT_PATH: './dist'
 
jobs:
  build:
    name: 'Build Application'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
 
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
 
    - name: Install dependencies
      run: npm install
 
    - name: Build application
      run: npm run build
 
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: ./dist/
        retention-days: 30
 
    - name: Display build info
      run: |
        echo "Build completed successfully"
        ls -la ./dist/

  terraform:
    name: 'Terraform Infrastructure'
    runs-on: ubuntu-latest
    environment: production
    outputs:
      storage_account_link: ${{ steps.terraform_output.outputs.storage_account_link }}
      storage_account_name: ${{ steps.terraform_output.outputs.storage_account_name }}
      resource_group_name: ${{ steps.terraform_output.outputs.resource_group_name }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.ARM_CREDS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform init

    - name: Terraform Validate
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: terraform validate

    - name: Terraform Plan
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: |
        terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      id: terraform_output
      working-directory: ${{ env.WORKING_DIRECTORY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: |
        echo "storage_account_link=$(terraform output -raw storage_account_link)" >> $GITHUB_OUTPUT
        echo "storage_account_name=$(terraform output -raw storage_account_name)" >> $GITHUB_OUTPUT
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

  deploy:
    name: 'Deploy to Azure Storage'
    runs-on: ubuntu-latest
    needs: terraform
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ${{ env.BUILD_ARTIFACT_PATH }}
      continue-on-error: true

    - name: Check Build Directory
      run: |
        if [ -d "${{ env.BUILD_ARTIFACT_PATH }}" ]; then
          echo "Build directory exists"
          ls -la ${{ env.BUILD_ARTIFACT_PATH }}
        else
          echo "Build directory not found, creating empty directory"
          mkdir -p ${{ env.BUILD_ARTIFACT_PATH }}
          echo "Build artifacts not found" > ${{ env.BUILD_ARTIFACT_PATH }}/README.txt
        fi

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.ARM_CREDS }}

    - name: Upload to Azure Storage
      run: |
        # Upload all files from build directory
        az storage blob upload-batch \
          --account-name ${{ needs.terraform.outputs.storage_account_name }} \
          --destination '$web' \
          --source ${{ env.BUILD_ARTIFACT_PATH }} \
          --overwrite

    - name: Display Website URL
      run: |
        echo "Website deployed to: ${{ needs.terraform.outputs.storage_account_link }}"